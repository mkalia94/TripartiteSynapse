#!/bin/bash

# ---------------------------------------------------
# Run Experiments using the TriSyn package using Bash
# - Manu Kalia, November 25, 2019.
# ---------------------------------------------------

#---------------------RUNNING EXPERIMENTS----------------------------------------------

# ECS sizes contains three ECS sizes, small, medium and big, that correspond to initial
# extracellular ratios of 20%, 50% and 98% (~infinite).

# Experiments has the interventions/experiments you want to run. Please do edit them as per
# your convenience. The following options are available:

#  1. --tstart TSTART  : start energy deprivation at TSTART.
#  2. --tend TEND : stop energy deprivation at TEND.
#  3. --perc PERC : (PERC*100)% of energy available during energy deprivation
#  4. --tfinal TFINAL : stop experiment at TFINAL
#  5. --excite TSTART TFINAL CURRENT: excite the neuron with 5pA current starting at TSTART
#                              and ending at TEND
#  6. --astblock TSTART TFINAL : block all astrocyte interactions starting at TSTART
#                               and ending at TEND
#  7. --block {\"CURRENT\":[TSTART,TEND],...} : block CURRENT starting at TSTART
#                               and endning at TEND. Multiple such terms can
#                               be appended in the dict.
#  8. --nogates : Makes the simulation much faster by setting m,h and n to their
#                 equilibrium values, useful if you only want to see ion concentration dynamics
#  9. --nosynapse : Blocks all synaptic processes (glutamate recyling, GLT, NCX). Use if you are interested only
#                   in somatic dynamics.
#  *. --PARAMETER VAL : Changes baseline parameter PARAMETER from its default value to VAL. Check
#                       tps/fm_dict.py for a list of possible PARAMETERS to change at baseline. Note
#                       that all parameters set to 0 in that file will be calculated once the experiment
#                       is executed.

#--------------------------PLOTTING------------------------------------------------------

# There are three ways to plot 1) Plot user-defined dynamics in one figure 2) Plot all relevant dynamics
# (predefined) in one figure 3) Run two experiments, plot all relevant dynamics side-by-side for
# comparison 
#
# *. --saveloc SAVELOC : if used in combination with the keywords below, it saves plots to SAVELOC
#                        IF saveloc doesn't exist it will create one.    
# 1. --plot {\"TITLE\":[EXPR1,EXPR2...],...} : Plot EXPR1, EXPR2... with title TITLE. Multiple
#                                              such terms can be appended in the dict.
# 2. --plotall : Plots all relevant (predefined) dynamics in one figure
# 3. --casename CASENAME --case1 {\"PAR1\":VAL1,...} --case2 {\"PAR2\":VAL2,...}:
#                Run experiment corresponding to case1, execute plotall on the left side of a figure,
#                then run experiment correspondng to case2, and execute plotall on the right side of a
#                figure.

#------------------------- DATA ANALYTICS-----------------------------------------------

# There is possibility to save a simulation as 1) a numpy file for later use, 2) as a MATLAB (.mat)file
# for later use, 3) show eigenvalues corresponding to last point (assuming that the simulation converges to an
# equilibrium, or close to it) 4) save baseline parameters to .mat file to be used for continuation.
#
#  1. --savenumpy : Saves time steps in tfile.npy and states in yfile.npy in saveloc (if provided).
#                  If you run cases (see Plotting, part 3) it will save files as *file1.npy and *file2.npy
#  2. --savematlab:  Saves time steps (t) and states (y) in sim.mat in saveloc (if provided).
#  3. (not present for now) --showeigs: Shows array of eigenvalues after simulation,
#                 assuming that the simulation converges to a steady state. Is useful in
#                 showing if the final state is stable or not.
#  4. --savematlabpar : Saves all parameters to params.mat in saveloc, which can be used in Matcont for continuation.

#------------------------------------------------------------------------------------
#------------------------- EXAMPLE RUNS-----------------------------------------------
#----------------------------------------------------------------------------------
declare -A ECSsizes
ECSsizes=( ["-s"]="SmallECS"
           ["-m"]="MedECS"
           ["-b"]="BigECS")

declare -A Experiments
Experiments=( ["INCXiblock"]="--tstart 20 --tend 40 --block {\"INCXi\":[100,120]} --tfinal 180"
              ["Calibration"]="--tstart 20 --tend 21.7 --perc 0.2 --tfinal 40"
              ["HealthyResponse"]="--tstart 500 --tend 600 --tfinal 30 --excite 0 20"
              ["AstKnockHealthy"]="--tstart 500 --tend 600 --tfinal 30 --excite 0 20 --astblock 10 30"
              ["UnhealthyResponse"]="--tstart 20 --tend 40 --tfinal 100 --excite 60 80"
	      ["NoSynapse"]="--tstart 20 --tend 40 --tfinal 100 --nosynapse"
	      ["NoGates"]="--tstart 20 --tend 40 --tfinal 100 --nogates")


# In the for loop below, you can change the arguments plot and titles to include
# whatever you would like to plot.


for name_ in "${!Experiments[@]}"; do
  for size_ in "${!ECSsizes[@]}"; do
    python set_up.py \
    --gltScale 2 --pumpScaleNeuron 2 --pumpScaleAst 2 \
    --name "${ECSsizes[$size_]}" \
    ${Experiments[$name_]} \
    $size_ \
    --solve \
    --write \
    --plot '{"MemPot":["Vi","Vg"],"Na":["NaCi","NaCg"],"Glu1":["GluCi","GluCg"],"Glu2":["GluCc"],"Ca":["CaCi","CaCc","CaCg"]}' \
    --titles '{"MemPot":"Membrane potential (in mV)","Na":"$[Na^+]$ (in mM)","W": "Volume (in pL)", "Glu1": "[Glu] (in mM)","Glu2":"[Glu] (in mM)","Ca":"$[Ca^{2+}]$ (in mM)" }' \
    --saveloc "$name_/${ECSsizes[$size_]}"
  done; 
done
